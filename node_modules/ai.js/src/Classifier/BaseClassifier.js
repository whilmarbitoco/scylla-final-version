var Evaluator = require('../Evaluator/Evaluator.js');

class BaseClassifier {
    constructor (argument = {}) {
        var configFilePath = argument['configFilePath'];
        if (configFilePath) {
        }

        this.score = 0;
        this.evaluator = new Evaluator();

        this.__labelCategoryMap = {};
        this.__labelCategoryList = [];
    }
    train (argument = {}) {
        this.__mergeLabelCategory(argument);
    }
    test (argument = {}) {
        this.__mergeLabelCategory(argument);
    }
    evaluate (argument = {criterion: 'precision'}) {
        return this.evaluator.evaluate({predicated: this.test(argument), truth: argument.data.labels, criterion: argument.criterion || 'precision'});
    }
    __mergeLabelCategory (argument = {}) {
        let {data} = argument;
        for (let labelCategory of data.__labelCategories) {
            if (this.__labelCategoryMap[labelCategory] == undefined) {
                this.__labelCategoryMap[labelCategory] = this.__labelCategoryList.length;
                this.__labelCategoryList.push(labelCategory);
            }
        }
    }
    __labelToString (label) {
        return this.__labelCategoryList[label];
    }
    __labelToNumber (label) {
        return this.__labelCategoryMap[label];
    }
    __toReadablePrediction (argument = {}) {
        let {predicated} = argument;
        return predicated.map(value => this.__labelCategoryList[value]);
    }
};

module.exports = BaseClassifier;
